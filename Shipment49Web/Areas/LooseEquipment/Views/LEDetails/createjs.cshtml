@model Reports.JoiningShackle

@{
    ViewBag.Title = "createjs";
    Layout = "~/Views/Shared/_LayoutVessel7.cshtml";
}


@*<script>
        $(document).ready(function () {
            $("#RopeTypeId").select2();
            $("#ManufacturerId").select2();
            $("#RopeTagging").select2();

        });
    </script>*@


<script>


    function compcheck() {

        var dateFrom = document.getElementById("DateReceived").value;

        var dateTo = document.getElementById("DateInstalled").value;

        if (dateFrom > dateTo) {
            alert("Installed date can not less than Received Date !");
            document.getElementById("DateInstalled").value = dateFrom;
        }

        //$("#InstalledDate").val(dateTo)
    };
</script>

@*<script type="text/javascript">
        debugger;
            var todaydate = new Date();
            var day = todaydate.getDate();
            var month = todaydate.getMonth() + 1;
            var year = todaydate.getFullYear();
            var datestring = day + "/" + month + "/" + year;
        //window.onload = function () {
            document.getElementById("ReceivedDate").value = datestring;
            document.getElementById("InstalledDate").value = datestring;


        //}

    </script>*@
<script type="text/javascript">
    //debugger;

    //var todaydate = new Date();
    //var day = todaydate.getDate();
    //var month = todaydate.getMonth() + 1;
    //var year = todaydate.getFullYear();
    //var datestring = day + "/" + month + "/" + year;
    //window.onload = function () {
    //    document.getElementById("ReceivedDate").value = datestring;
    //}

    //debugger;
    // $("#ReceivedDate").datepicker();

    //$("#ReceivedDate").datepicker({
    //    defaultDate: "-25y",
    //    dateFormat: "dd-mm-yy",
    //    yearRange: "c-80:c+40",
    //    inline: true,
    //    showAnim: 'fadeIn',
    //    changeMonth: true,
    //    changeYear: true,
    //    minDate: "-120y",
    //    maxDate: "-18y",
    //});

</script>


<script>

    window.onload = function () {

        var isvalue = $("#IsInstalled").val();

        if (isvalue === 'Yes') {
            eventTwo();
            $("#secondRad").prop('checked', true);
            $("#firstRad").prop('checked', false);

        }
        else {
            eventOne();
            $("#firstRad").prop('checked', true);
            $("#secondRad").prop('checked', false);

            // $('input:radio[id="firstRad"]').filter('[value="No"]').attr('checked', true);
        }


        var uid = document.getElementById("UniqueID").value;
        if (uid === "") {
            document.getElementById("UniqueID").readOnly = false;
        }
        else { document.getElementById("UniqueID").readOnly = true; }
    };




    function eventOne() {
        $('#instdt').hide();
        $("#IsInstalled").val("No");
        $("#DateInstalled").prop('required', false);
    };
    function eventTwo() {
        $('#instdt').show();
        $("#IsInstalled").val("Yes");
        $("#DateInstalled").prop('required', true);
    };

</script>


<div class="content">
    @using (Html.BeginForm("Createjs", "LEDetails"))
    {
        <div class="page-heading page-header-flex">
            <div>
                <h1 class="page-title">
                    Loose Equipment Details / Add Joining Shackle
                </h1>
                <ol class="breadcrumb">
                    <li><a href="">Home</a></li>
                    <li><a href="">Form</a></li>
                    <li><a>Create</a></li>
                </ol>
            </div>
            <div class="form-actions">
                <button name="Submit" type="submit" class="btn btn-success btn-width"><i class="uil uil-check mr-2"></i>Submit</button>
                <button name="Reset" type="reset" id="btnReset" class="btn btn-danger btn-width"><i class="uil uil-redo mr-2"></i>Reset</button>
            </div>
        </div>


        <div class="wrapper wrapper-content">
            <div class="container">
                @if (TempData["Error"] != null)
                {
                    <p class="alert alert-danger" id="errorMessage">@TempData["Error"]</p>
                }
                @if (TempData["Success"] != null)
                {
                    <p class="alert alert-success" id="successMessage">@TempData["Success"]</p>
                }
                <div class="form-body">
                    <div class="row">
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(e => e.Id)

                        <div class="col-md-8 mx-auto">
                            <div class="row form-group ">
                                <label class="col-sm-4 col-form-label">
                                    <label class="control-label">Joining Shackle Type<sup>*</sup></label>
                                </label>
                                <div class="col-sm-8">
                                    @Html.DropDownListFor(model => model.Type, new SelectList(Model.JSType, "Value", "Text"), new { @class = "form-control select2", @required = "true", })
                                    @*@Html.DropDownListFor(model => model.Type, new SelectList(Model.JSType, "Value", "Text"), htmlAttributes: new { @class = "form-control", @required = "true", })*@
                                    @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
                                    <div class="error"></div>
                                </div>
                            </div>

                            <div class="row form-group">
                                <label class="col-sm-4 col-form-label">
                                    <label class="control-label">Certificate Number<sup>*</sup></label>
                                </label>
                                <div class="col-sm-8">
                                    @Html.EditorFor(model => model.CertificateNumber, new { htmlAttributes = new { @class = "form-control", @required = "true", } })
                                    @Html.ValidationMessageFor(model => model.CertificateNumber, "", new { @class = "text-danger" })
                                    <div class="error"></div>
                                </div>
                            </div>
                            <div class="row form-group">
                                <label class="col-sm-4 col-form-label">
                                    <label class="control-label">Unique Identification No.<sup>*</sup></label>
                                </label>
                                <div class="col-sm-8">
                                    @Html.EditorFor(model => model.UniqueID, new { htmlAttributes = new { @class = "form-control", @required = "true", } })
                                    @Html.ValidationMessageFor(model => model.UniqueID, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="row form-group">
                                <label class="col-sm-4 col-form-label">
                                    <label class="control-label">MBL(T)<sup>*</sup></label>
                                </label>
                                <div class="col-sm-8">
                                    @Html.EditorFor(model => model.MBL, new { htmlAttributes = new { @class = "form-control", @required = "true", @maxlength = 6, @onkeypress = "return isNumberKey(event)", @onKeyUp = "requiredValue(this)" } })
                                    @*<span id="messageMbl"></span>*@
                                    <div id="messageMbl" class="error"></div>
                                </div>
                            </div>
                            @*<div class="row form-group ">
                                    <label class="col-sm-4 col-form-label">
                                        <label class="control-label">Type</label>
                                    </label>
                                    <div class="col-sm-8">
                                        <select class="form-control select2">
                                            <option>hello</option>
                                            <option>amit</option>
                                        </select>
                                        <div class="error"></div>
                                    </div>
                                </div>*@
                            <div class="row form-group">
                                <label class="col-sm-4 col-form-label">
                                    <label class="control-label">Manufacturer Name<sup>*</sup></label>
                                </label>
                                <div class="col-sm-8">
                                    @Html.EditorFor(model => model.ManufactureName, new { htmlAttributes = new { @class = "form-control", @required = "true", } })
                                    @Html.ValidationMessageFor(model => model.ManufactureName, "", new { @class = "text-danger" })
                                    <div class="error"></div>
                                </div>
                            </div>
                            <div class="row form-group">
                                <label class="col-sm-4 col-form-label">
                                    <label class="control-label">Received Date<sup>*</sup></label>
                                </label>
                                <div class="col-sm-8">
                                    @*<input type="text" class="form-control datepicker" placeholder="dd-mm-yyyy">*@
                                    @*@Html.EditorFor(model => model.ReceivedDate, "{0:dd-MMM-yyyy}", new { htmlAttributes = new { @class = "form-control dtpicker", @required = "true", } })*@


                                    @Html.TextBoxFor(x => x.DateReceived, "{0:yyyy-MM-dd}", new { @class = "form-control datepicker", @placeholder = "yyyy-mm-dd", @autocomplete = "Off", @required = "true" })

                                    @*@Html.EditorFor(model => model.ReceivedDate, "{0:dd-MMM-yyyy}", new { htmlAttributes = new { @class = "form-control", @type = "date", @required = "true", } })*@

                                    @Html.ValidationMessageFor(model => model.DateReceived, "", new { @class = "text-danger " })
                                    <div class="error"></div>
                                </div>
                            </div>
                            <div class="row form-group ">
                                <label class="col-sm-4 col-form-label">
                                    <label class="control-label">Is this Loose Eq. installed and in use? <sup>*</sup></label>
                                </label>
                                <div class="col-sm-8">
                                    <label class="select_radio" onclick="eventOne()">
                                        <input type="radio" id="firstRad" name="football_program" checked="checked"> <span class="label-text">No</span>


                                    </label>
                                    <label class="select_radio" onclick="eventTwo()">
                                        <input type="radio" id="secondRad" name="football_program"> <span class="label-text">Yes</span>
                                    </label>
                                    <div class="error"></div>
                                </div>
                            </div>

                            <div style="display:none;">
                                @Html.TextBoxFor(m => m.IsInstalled)
                            </div>

                            <div class="row form-group">
                                <label class="col-sm-4 col-form-label">
                                    <label class="control-label">Installed Date</label>
                                </label>
                                <div class="col-sm-8">
                                    @*<input type="text" class="form-control datepicker" placeholder="dd-mm-yyyy">*@
                                    @Html.TextBoxFor(x => x.DateInstalled, "{0:yyyy-MM-dd}", new { @class = "form-control datepicker", @placeholder = "yyyy-mm-dd", @autocomplete = "Off", @onchange = "compcheck()", @required = "false" })

                                    @Html.ValidationMessageFor(model => model.DateInstalled, "", new { @class = "text-danger " })
                                    <div class="error"></div>
                                </div>
                            </div>
                            <div class="row form-group">
                                <label class="col-sm-4 col-form-label">
                                    <label class="control-label">Remarks</label>
                                </label>
                                <div class="col-sm-8">
                                    @Html.EditorFor(model => model.Remarks, new { htmlAttributes = new { @class = "form-control" } })
                                    <div class="error"></div>
                                </div>
                            </div>

                        </div>
                    </div>
                </div>
            </div>
        </div>


    }
</div>


<script>
    $("#DateReceived").keydown(function (e) {
        e.preventDefault();
       
    });

    $("#DateInstalled").keydown(function (e) {
        e.preventDefault();
    });
</script>

<script language=Javascript>
      <!--
    function isNumberKey(evt) {

        var charCode = (evt.which) ? evt.which : event.keyCode
        if (charCode != 46 && charCode > 31 && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }
    //-->
</script>

<script type="text/javascript">
    function requiredValue(arg) {

        debugger;
        var id = arg.getAttribute('id');
        var value = arg.value;

        if (value > 999) {

            var message = "";
            if (id == "DiaMeter") {
                message = document.getElementById('messageDia');
            }
            if (id == "Length") {
                message = document.getElementById('messageLnth');
            } if (id == "MBL") {
                message = document.getElementById('messageMbl');
            } if (id == "LDBF") {
                message = document.getElementById('messageLdbf');
            }
            if (id == "WLL") {
                message = document.getElementById('messageWll');
            }

            var goodColor = "#0C6";
            var badColor = "#FF0000";

            message.style.color = badColor;
            message.innerHTML = "Value not greater then 999.99 !"
            $("#" + id + "").val('');
        }
        else {
            var message = "";
            if (id == "DiaMeter") {
                message = document.getElementById('messageDia');
            }
            if (id == "Length") {
                message = document.getElementById('messageLnth');
            } if (id == "MBL") {
                message = document.getElementById('messageMbl');
            } if (id == "LDBF") {
                message = document.getElementById('messageLdbf');
            }
            if (id == "WLL") {
                message = document.getElementById('messageWll');
            }
            message.innerHTML = ""
        }

    }
</script>

<script type="text/javascript">

    //setTimeout(function () {
    //    debugger;
    //    $("#successMessage").hide('blind', {}, 500)
    //}, 5000);


    setTimeout(function () {

        $('#successMessage').fadeOut('fast');
        $('#errorMessage').fadeOut('fast');
    }, 3000);


</script>

<script>
    $('#btnReset').click(function () {
        $("#Type").val(null).trigger("change");
    });
</script>

<script type="text/javascript">
    $('.datepicker').datepicker();
</script>