
@model Shipment49Web.Common.GraphData

<div class="col-md-10">
    <canvas id="@string.Format("myChart{0}", Model.chartId)" style="display: block;width: 500px;height: 300px;"></canvas>
    <input type="hidden" id="@string.Format("hdn{0}", Model.chartId)" class="hdn" value="@Model.data" />
    <hr />
</div>

<script>

    var data = $("@string.Format("#hdn{0}", Model.chartId)").val();

    debugger;
    data = JSON.parse(data);
    console.log(data);



    var ctx = $("@string.Format("#myChart{0}", Model.chartId)");

   var maxval = @Model.chartId;

    var myChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: ['Tidal Range (>3.0m)', 'Current (>0.5Kts)', 'Wind (>20Kts)', 'Air Temp (< 10 OR > 40 Deg C)', 'Squall', 'Surging', 'Sea swell', 'Passing Traffic Affect', 'Continuous Fender Contact','Damaged in Mooring Operation'],
            datasets: data

        },
        options: {
            "hover": {
                "animationDuration": 0
            },
            "animation": {
                "duration": 1,
                "onComplete": function () {
                    var chartInstance = this.chart,
                        ctx = chartInstance.ctx;

                    ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                    ctx.textAlign = 'center';
                    ctx.textBaseline = 'bottom';

                    this.data.datasets.forEach(function (dataset, i) {
                        var meta = chartInstance.controller.getDatasetMeta(i);
                        meta.data.forEach(function (bar, index) {
                            var data = dataset.data[index];
                            ctx.fillText(data, bar._model.x, bar._model.y - 5);
                        });
                    });
                }
            },
            title: {
                display: true,
                text: 'Custom Chart Title'
            },
            legend: {
                "display": true,
                 align: 'left'
            },
            tooltips: {
                "enabled": true
            },
            scales: {
                yAxes: [{
                    display: true,
                    gridLines: {
                        display: true
                    },
                    ticks: {
                        max: maxval,
                        display: true,
                        beginAtZero: true
                    }
                }],
                xAxes: [{
                    gridLines: {
                        display: false
                    },
                    ticks: {
                        beginAtZero: true
                    }
                }]
            }
        }


    });

    document.getElementById("download").addEventListener('click', function () {
        ///*Get image of canvas element*/
        //var url_base64jp = document.getElementById("#myChart20").DataURL("image/png").replace(/^data:image\/[^;]/, 'data:application/octet-stream');
        ///*get download button (tag: <a></a>) */
        // var a = document.getElementById("download");
        ///*insert chart image url to download button (tag: <a></a>) */
        //  a.href = url_base64jp;


        $("@string.Format("#myChart{0}", Model.chartId)").get(0).toBlob(function (blob) {
            saveAs(blob, "Anomalies_Reported_By_Vessels.png");
        });

    });

     document.getElementById("download1").addEventListener('click', function () {

        // html2canvas(document.querySelector("#bar-chart2")).then(canvas => {
            
        //     $(canvas).get(0).toBlob(function (blob)
        //     {
        //         // setTimeout(function () { saveAs(blob, "By_Vessels.png"); }, 6000);
                
        //         saveAs(blob, "By_Vessels.png");
        //         alert('hi');
        //});

        // });
                 
         var svg = document.getElementById("#bar-chart2").firstElementChild;

         svgToPng(svg, (imgData) => {
             const pngImage = document.createElement('img');
             document.body.appendChild(pngImage);
             pngImage.src = imgData;
         });
    });

   // var c = document.getElementById("myDIV").firstElementChild;

//    const svg = `<svg version="1.1" baseProfile="full" width="300" height="200"
//xmlns="http://www.w3.org/2000/svg">
//   <rect width="100%" height="100%" fill="red" />
//   <circle cx="150" cy="100" r="80" fill="green" />
//   <text x="150" y="125" font-size="60" text-anchor="middle" fill="white">SVG</text></svg>`
//    svgToPng(svg, (imgData) => {
//        const pngImage = document.createElement('img');
//        document.body.appendChild(pngImage);
//        pngImage.src = imgData;
//    });
    function svgToPng(svg, callback) {
        const url = getSvgUrl(svg);
        svgUrlToPng(url, (imgData) => {
            callback(imgData);
            URL.revokeObjectURL(url);
        });
    }
    function getSvgUrl(svg) {
        return URL.createObjectURL(new Blob([svg], { type: 'image/svg+xml' }));
    }
    function svgUrlToPng(svgUrl, callback) {
        const svgImage = document.createElement('img');
        // imgPreview.style.position = 'absolute';
        // imgPreview.style.top = '-9999px';
        document.body.appendChild(svgImage);
        svgImage.onload = function () {
            const canvas = document.createElement('canvas');
            canvas.width = svgImage.clientWidth;
            canvas.height = svgImage.clientHeight;
            const canvasCtx = canvas.getContext('2d');
            canvasCtx.drawImage(svgImage, 0, 0);
            const imgData = canvas.toDataURL('image/png');
            callback(imgData);
            // document.body.removeChild(imgPreview);
        };
        svgImage.src = svgUrl;
    }

</script>


